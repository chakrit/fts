// Generated by CoffeeScript 1.3.3
(function() {

  module.exports = (function() {
    var splitWords, vars, _;
    _ = require('underscore');
    splitWords = require('icu-wordsplit');
    return vars = {
      splitWords: function(word) {
        if (!(word != null) || word.length === 0) {
          return [];
        }
        return splitWords(word);
      },
      permuteWords: function(words) {
        var _permute;
        if (!(words != null)) {
          return [];
        }
        if (words.length === 1) {
          return [words[0]];
        }
        return (_permute = function(words, idx) {
          var i, results, word, _i, _ref, _ref1;
          if (idx === words.length) {
            return [];
          }
          word = words[idx];
          results = [word];
          for (i = _i = _ref = idx + 1, _ref1 = words.length - 1; _i <= _ref1; i = _i += 1) {
            word += words[i];
            results.push(word);
          }
          results.push.apply(results, _permute(words, idx + 1));
          return results;
        })(words, 0);
      },
      permuteTypos: function(word, degree) {
        var i, prevDegree, result, results, results_, typo, uniq, _i, _j, _k, _len, _ref;
        if (!(word != null) || word.length === 0) {
          return [];
        }
        if (degree == null) {
          degree = 2;
        }
        uniq = {};
        results = [word];
        prevDegree = [word];
        for (i = _i = 1; _i <= degree; i = _i += 1) {
          results_ = [];
          for (_j = 0, _len = prevDegree.length; _j < _len; _j++) {
            result = prevDegree[_j];
            for (i = _k = 0, _ref = result.length - 1; _k <= _ref; i = _k += 1) {
              typo = result.substr(0, i);
              typo += result.substr(i + 1);
              if (typo.length && !uniq[typo]) {
                results_.push(typo);
                results.push(typo);
                uniq[typo] = true;
              }
            }
          }
          prevDegree = results_;
        }
        return results;
      },
      permuteKeys: function(string) {
        var word, words;
        words = vars.splitWords(string);
        words = vars.permuteWords(words);
        words = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = words.length; _i < _len; _i++) {
            word = words[_i];
            _results.push(vars.permuteTypos(word));
          }
          return _results;
        })();
        words = _.flatten(words);
        return words = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = words.length; _i < _len; _i++) {
            word = words[_i];
            _results.push(word.toLowerCase());
          }
          return _results;
        })();
        /*
              sort words by length/stirng.length
              could owrk since this makes a preferrence for
              shorter result
        */

      }
    };
  })();

}).call(this);
